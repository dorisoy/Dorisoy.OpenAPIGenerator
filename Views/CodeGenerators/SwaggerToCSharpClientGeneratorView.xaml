<codeGenerators:CodeGeneratorViewBase x:Class="NSwagStudio.Views.CodeGenerators.SwaggerToCSharpClientGeneratorView"
                                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                                      xmlns:converters="clr-namespace:MyToolkit.Converters;assembly=MyToolkit.Extended"
                                      xmlns:localConverters="clr-namespace:NSwagStudio.Converters"
                                      xmlns:avalonedit="http://icsharpcode.net/sharpdevelop/avalonedit"
                                      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                                      xmlns:viewModels="clr-namespace:NSwagStudio.ViewModels.CodeGenerators"
                                      xmlns:controls="clr-namespace:NSwagStudio.Controls"
                                      xmlns:dialogs="clr-namespace:MyToolkit.Dialogs;assembly=MyToolkit.Extended"
                                      xmlns:codeGenerators="clr-namespace:NSwagStudio.Views.CodeGenerators"
                                      xmlns:views="clr-namespace:NSwagStudio.Views.CodeGenerators.Views"
                                      mc:Ignorable="d" 
                                      d:DesignHeight="800" d:DesignWidth="800">

    <UserControl.Resources>
        <viewModels:SwaggerToCSharpClientGeneratorViewModel x:Key="ViewModel" />
        <converters:VisibilityConverter x:Key="VisibilityConverter" />
        <converters:NotConverter x:Key="NotConverter" />
        <localConverters:NumberAdditionConverter x:Key="NumberAdditionConverter" />
        <localConverters:StringArrayConverter x:Key="StringArrayConverter" />
    </UserControl.Resources>

    <TabControl TabStripPlacement="Left" Margin="8" Name="TabControl" DataContext="{StaticResource ViewModel}">
        <TabItem Header="设置" HeaderTemplate="{StaticResource RotatedTabItem}">
            <ScrollViewer x:Name="ScrollViewer" VerticalScrollBarVisibility="Visible" 
                          HorizontalScrollBarVisibility="Hidden"
                          IsEnabled="{Binding IsLoading, Converter={StaticResource NotConverter}}">
                <StackPanel Margin="8,8,8,0" Width="{Binding ElementName=ScrollViewer, Path=ActualWidth, Converter={StaticResource NumberAdditionConverter}, ConverterParameter=-32}">
                    <TextBlock Text="CSharp 客户端配置" FontSize="15" FontWeight="Bold" Margin="0,0,0,12" />

                    <TextBlock Text="命名空间" FontWeight="Bold"
                               Margin="0,0,0,6" />
                    <TextBox Text="{Binding Command.Namespace, Mode=TwoWay}" 
                             ToolTip="Namespace"
                             Margin="0,0,0,12" />

                    <TextBlock Text="使用附加命名空间（逗号分隔）" 
                               FontWeight="Bold" 
                               Margin="0,0,0,6" />
                    <TextBox Text="{Binding Command.AdditionalNamespaceUsages, Mode=TwoWay, Converter={StaticResource StringArrayConverter}, ConverterParameter=','}" 
                             ToolTip="AdditionalNamespaceUsages" 
                             Margin="0,0,0,12" />

                    <CheckBox IsChecked="{Binding Command.GenerateContractsOutput, Mode=TwoWay}" 
                              ToolTip="GenerateContractsOutput"
                              Content="生成协议输出到" 
                              Margin="0,0,0,12" />

                    <StackPanel Visibility="{Binding Command.GenerateContractsOutput, Converter={StaticResource VisibilityConverter}}">
                        <TextBlock Text="协议命名空间"
                                   FontWeight="Bold" 
                                   Margin="0,0,0,6" />
                        <TextBox Text="{Binding Command.ContractsNamespace, Mode=TwoWay}"
                                 ToolTip="ContractsNamespace"
                                 Margin="0,0,0,12" />

                        <TextBlock Text="使用附加命名空间（逗号分隔）" 
                                   FontWeight="Bold" 
                                   Margin="0,0,0,6" />
                        <TextBox Text="{Binding Command.AdditionalContractNamespaceUsages, Mode=TwoWay, Converter={StaticResource StringArrayConverter}, ConverterParameter=','}" 
                                 ToolTip="AdditionalContractNamespaceUsages" 
                                 Margin="0,0,0,12" />
                    </StackPanel>

                    <CheckBox IsChecked="{Binding Command.GenerateExceptionClasses, Mode=TwoWay}"
                              Content="生成Exception异常类（禁用时，必须导入异常类）" 
                              ToolTip="GenerateExceptionClasses"
                              Margin="0,0,0,12" />

                    <StackPanel Visibility="{Binding Command.GenerateExceptionClasses, Converter={StaticResource VisibilityConverter}}">
                        <TextBlock Text="Exception异常类命名 (可以包含 '｛controller｝'占位符)" 
                                   FontWeight="Bold" 
                                   Margin="0,0,0,6" />
                        <TextBox Text="{Binding Command.ExceptionClass, Mode=TwoWay}" 
                                 ToolTip="ExceptionClass"
                                 Margin="0,0,0,12" />
                    </StackPanel>

                    <GroupBox Header="客户端" Margin="0,0,0,12">
                        <StackPanel Margin="4,8,4,-8">
                            <CheckBox IsChecked="{Binding Command.GenerateClientClasses, Mode=TwoWay}" 
                                      ToolTip="GenerateClientClasses"
                                      Content="生成客户端代理类" Margin="0,0,0,12" />

                            <StackPanel Visibility="{Binding Command.GenerateClientClasses, Converter={StaticResource VisibilityConverter}}">
                                <TextBlock Margin="0,0,0,6" TextWrapping="Wrap">
                                    <Run Text="操作生成模式" FontWeight="Bold" />
                                    <LineBreak />
                                   类名的｛controller｝占位符被生成的客户端名称替换（取决于OperationGenerationMode策略）
                                </TextBlock>
                                <ComboBox SelectedItem="{Binding Command.OperationGenerationMode, Mode=TwoWay}" 
                                          ToolTip="OperationGenerationMode"
                                          ItemsSource="{Binding OperationGenerationModes}" Margin="0,0,0,12" />

                                <TextBlock Text="Class类名" FontWeight="Bold" Margin="0,0,0,6" />
                                <TextBox Text="{Binding Command.ClassName, Mode=TwoWay}" ToolTip="ClassName" Margin="0,0,0,12" />

                                <TextBlock Text="Client类访问修饰符" FontWeight="Bold" Margin="0,0,0,6" />
                                <TextBox Text="{Binding Command.ClientClassAccessModifier, Mode=TwoWay}" 
                                         ToolTip="ClientClassAccessModifier" Margin="0,0,0,12" />

                                <TextBlock Text="在部分方法中使用带有受保护访问修饰符的方法（'classname.methodname'，逗号分隔）" FontWeight="Bold" Margin="0,0,0,6" />
                                <TextBox Text="{Binding Command.ProtectedMethods, Mode=TwoWay, Converter={StaticResource StringArrayConverter}, ConverterParameter=','}" 
                                         ToolTip="ProtectedMethods" Margin="0,0,0,12" />

                                <CheckBox IsChecked="{Binding Command.UseBaseUrl, Mode=TwoWay}"
                                          Content="使用基本URL请求" 
                                          ToolTip="UseBaseUrl" Margin="0,0,0,12" />
                                
                                <CheckBox IsChecked="{Binding Command.GenerateBaseUrlProperty, Mode=TwoWay}" 
                                          Visibility="{Binding Command.UseBaseUrl, Converter={StaticResource VisibilityConverter}}"
                                          Content="生成BaseUrl属性（否则必须在基类上定义）" 
                                          ToolTip="GenerateBaseUrlProperty" Margin="0,0,0,12" />

                                <CheckBox IsChecked="{Binding Command.GenerateOptionalParameters, Mode=TwoWay}" 
                                          ToolTip="GenerateOptionalParameters"
                                          Content="生成可选参数（重新排序参数（首先是必需的，最后是可选的）并生成可选参数）" Margin="0,0,0,12" />

                                <TextBlock Text="排除的参数名称（逗号分隔）" FontWeight="Bold" Margin="0,0,0,12" />
                                <TextBox ToolTip="ExcludedParameterNames" 
                                         Text="{Binding Command.ExcludedParameterNames, Mode=TwoWay, Converter={StaticResource StringArrayConverter}, ConverterParameter=','}" 
                                         Margin="0,0,0,12" />

                                <CheckBox IsChecked="{Binding Command.GenerateSyncMethods, Mode=TwoWay}"
                                          Content="生成synchronous同步方法（不推荐）" 
                                          ToolTip="GenerateSyncMethods" Margin="0,0,0,12" />

                                <CheckBox IsChecked="{Binding Command.GeneratePrepareRequestAndProcessResponseAsAsyncMethods, Mode=TwoWay}"
                                          Content="将PrepareRequest和ProcessResponse作为异步方法生成（如果选中，则必须在基类或部分类中定义方法）" 
                                          ToolTip="GeneratePrepareRequestAndProcessResponseAsAsyncMethods" Margin="0,0,0,12" />

                                <CheckBox IsChecked="{Binding Command.ExposeJsonSerializerSettings, Mode=TwoWay}"
                                          Content="公开JsonSerializerSettings属性" 
                                          ToolTip="ExposeJsonSerializerSettings" Margin="0,0,0,12" />

                                <CheckBox IsChecked="{Binding Command.InjectHttpClient, Mode=TwoWay}" 
                                          ToolTip="InjectHttpClient"
                                          Content="通过构造函数注入HttpClient（生命周期由调用者管理）" Margin="0,0,0,12" />

                                <CheckBox IsChecked="{Binding Command.DisposeHttpClient, Mode=TwoWay}" 
                                          ToolTip="DisposeHttpClient"
                                          Visibility="{Binding Command.InjectHttpClient, Converter={StaticResource NotConverter}}"
                                          Content="释放HttpClient（生命周期必须由基类和CreateHttpClientAsync()处理）" Margin="0,0,0,12" />

                                <CheckBox IsChecked="{Binding Command.GenerateClientInterfaces, Mode=TwoWay}" 
                                          ToolTip="GenerateClientInterfaces"
                                          Content="为客户端类生成接口" Margin="0,0,0,12" />

                                <TextBlock Text="客户端接口的基类接口（可选）" FontWeight="Bold" Margin="0,0,0,6"
                                           Visibility="{Binding Command.GenerateClientInterfaces, Converter={StaticResource VisibilityConverter}}" />
                                <TextBox Text="{Binding Command.ClientBaseInterface, Mode=TwoWay}"
                                         Visibility="{Binding Command.GenerateClientInterfaces, Converter={StaticResource VisibilityConverter}}"
                                         ToolTip="ClientBaseInterface" Margin="0,0,0,12" />

                                <CheckBox IsChecked="{Binding Command.SerializeTypeInformation, Mode=TwoWay}" 
                                          ToolTip="SerializeTypeInformation"
                                          Content="序列化$type属性中的类型信息（不推荐，也可将TypeNameHandling设置为Auto）" Margin="0,0,0,12" />

                                <TextBlock Text="Http Client 类型" FontWeight="Bold" Margin="0,0,0,6" />
                                <TextBox Text="{Binding Command.HttpClientType, Mode=TwoWay}" ToolTip="HttpClientType" Margin="0,0,0,12" />

                                <TextBlock Text="使用DateTime格式化方法参数" FontWeight="Bold" Margin="0,0,0,6" />
                                <TextBox Text="{Binding Command.ParameterDateTimeFormat, Mode=TwoWay}" ToolTip="ParameterDateTimeFormat" Margin="0,0,0,12" />

                                <TextBlock Text="使用Date格式化方法参数" FontWeight="Bold" Margin="0,0,0,6" />
                                <TextBox Text="{Binding Command.ParameterDateFormat, Mode=TwoWay}" ToolTip="ParameterDateFormat" Margin="0,0,0,12" />

                                <TextBlock Text="查询参数为空可使用Null值" FontWeight="Bold" Margin="0,0,0,6" />
                                <TextBox Text="{Binding Command.QueryNullValue, Mode=TwoWay}" 
                                         ToolTip="QueryNullValue" Margin="0,0,0,12" />

                                <GroupBox Header="Base类和Configuration类" Margin="0,0,0,12">
                                    <StackPanel Margin="4,8,4,-8">
                                        <TextBlock Text="Base类名 (可选)" FontWeight="Bold" Margin="0,0,0,6" />
                                        <TextBox Text="{Binding Command.ClientBaseClass, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                                 ToolTip="ClientBaseClass" Margin="0,0,0,12" />

                                        <StackPanel Visibility="{Binding Command.ClientBaseClass, Converter={StaticResource VisibilityConverter}}">
                                            <CheckBox IsChecked="{Binding Command.UseHttpClientCreationMethod, Mode=TwoWay}" Margin="0,0,0,12" 
                                                        Visibility="{Binding Command.InjectHttpClient, Converter={StaticResource NotConverter}}"
                                                        ToolTip="UseHttpClientCreationMethod">
                                                <TextBlock Text="在客户端基类上调用CreateHttpClientAsync方法以创建新的HttpClient实例" TextWrapping="Wrap" />
                                            </CheckBox>

                                            <CheckBox IsChecked="{Binding Command.UseHttpRequestMessageCreationMethod, Mode=TwoWay}"
                                                        ToolTip="UseHttpRequestMessageCreationMethod" Margin="0,0,0,12">
                                                <TextBlock Text="在客户端基类上调用CreateHttpRequestMessageAsync方法以创建新的HttpRequestMessage实例" TextWrapping="Wrap" />
                                            </CheckBox>

                                            <CheckBox IsChecked="{Binding Command.GenerateUpdateJsonSerializerSettingsMethod, Mode=TwoWay}"
                                                      Content="生成UpdateJsonSerializerSettings方法（否则必须在基类中实现）" 
                                                        ToolTip="GenerateUpdateJsonSerializerSettingsMethod"
                                                        Margin="0,0,0,12" />

                                            <TextBlock Text="Configuration 配置类名（传递给基类ctor构造函数，可选）" FontWeight="Bold" Margin="0,0,0,6" />
                                            <TextBox Text="{Binding Command.ConfigurationClass, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                        ToolTip="ConfigurationClass" Margin="0,0,0,12" />
                                        </StackPanel>
                                    </StackPanel>
                                </GroupBox>

                                <GroupBox Header="响应包装" Margin="0,0,0,12">
                                    <StackPanel Margin="4,8,4,-8">
                                        <CheckBox IsChecked="{Binding Command.WrapDtoExceptions, Mode=TwoWay}" 
                                              ToolTip="WrapDtoExceptions"
                                                  Content="在SwaggerException实例中包装DTO异常" Margin="0,0,0,12" />

                                        <CheckBox IsChecked="{Binding Command.WrapResponses, Mode=TwoWay}" 
                                              ToolTip="WrapResponses"
                                                  Content="包装成功响应以允许完全响应访问" Margin="0,0,0,12" />

                                        <StackPanel Visibility="{Binding Command.WrapResponses, Converter={StaticResource VisibilityConverter}}">
                                            <TextBlock Text="包装响应的方法（全部为空，'ControllerName.MethodName'，逗号分隔）" FontWeight="Bold" Margin="0,0,0,6" />
                                            <TextBox ToolTip="WrapResponseMethods" 
                                                     Text="{Binding Command.WrapResponseMethods, Mode=TwoWay, Converter={StaticResource StringArrayConverter}, ConverterParameter=','}" 
                                                     Margin="0,0,0,12" />

                                            <CheckBox IsChecked="{Binding Command.GenerateResponseClasses, Mode=TwoWay}" 
                                                  ToolTip="GenerateResponseClasses"
                                                      Content="生成响应类（禁用时，必须导入响应类）" Margin="0,0,0,12" />

                                            <StackPanel Visibility="{Binding Command.GenerateResponseClasses, Converter={StaticResource VisibilityConverter}}">
                                                <TextBlock Text="响应类名（可能包含‘｛controller｝’占位符）" FontWeight="Bold" Margin="0,0,0,6" />
                                                <TextBox Text="{Binding Command.ResponseClass, Mode=TwoWay}" ToolTip="ResponseClass" Margin="0,0,0,12" />
                                            </StackPanel>
                                        </StackPanel>
                                    </StackPanel>
                                </GroupBox>

                                <GroupBox Header="Parameter参数类型" Margin="0,0,0,12">
                                    <StackPanel Margin="4,8,4,-8">
                                        <TextBlock Text="Generic Array 类型" FontWeight="Bold" Margin="0,0,0,6" />
                                        <TextBox Text="{Binding Command.ParameterArrayType, Mode=TwoWay}" ToolTip="ParameterArrayType" Margin="0,0,0,12" />

                                        <TextBlock Text="Generic Dictionary 类型" FontWeight="Bold" Margin="0,0,0,6" />
                                        <TextBox Text="{Binding Command.ParameterDictionaryType, Mode=TwoWay}" ToolTip="ParameterDictionaryType" Margin="0,0,0,12" />
                                    </StackPanel>
                                </GroupBox>

                                <GroupBox Header="Response响应类型" Margin="0,0,0,12">
                                    <StackPanel Margin="4,8,4,-8">
                                        <TextBlock Text="Generic Array 类型" FontWeight="Bold" Margin="0,0,0,6" />
                                        <TextBox Text="{Binding Command.ResponseArrayType, Mode=TwoWay}" ToolTip="ResponseArrayType" Margin="0,0,0,12" />

                                        <TextBlock Text="Generic Dictionary 类型" FontWeight="Bold" Margin="0,0,0,6" />
                                        <TextBox Text="{Binding Command.ResponseDictionaryType, Mode=TwoWay}" ToolTip="ResponseDictionaryType" Margin="0,0,0,12" />
                                    </StackPanel>
                                </GroupBox>
                            </StackPanel>
                        </StackPanel>
                    </GroupBox>

                    <views:CSharpSettingsView />

                    <GroupBox Header="Swagger信息" Margin="0,0,0,12">
                        <StackPanel Margin="4,8,4,-8">
                            <TextBlock Text="服务主机（可选，使用“.”移除主机名）" FontWeight="Bold" Margin="0,0,0,6" />
                            <TextBox Text="{Binding Command.ServiceHost, Mode=TwoWay}" ToolTip="ServiceHost" Margin="0,0,0,12" />

                            <TextBlock Text="服务架构 (可选, 'http', 'https', 'ws', 'wss', 多项单独换行)" FontWeight="Bold" Margin="0,0,0,6" />
                            <TextBox Text="{Binding Command.ServiceSchemes, Mode=TwoWay, Converter={StaticResource StringArrayConverter}}"
                                     ToolTip="ServiceSchemes" Height="52" AcceptsReturn="True" VerticalScrollBarVisibility="Visible" Margin="0,0,0,12" />
                        </StackPanel>
                    </GroupBox>

                    <GroupBox Header="模板" Margin="0,0,0,12">
                        <StackPanel Margin="4,8,4,-8">
                            <TextBlock Text="Template 目录" FontWeight="Bold" Margin="0,0,0,6" />
                            <TextBox Text="{Binding Command.TemplateDirectory, Mode=TwoWay}"
                                     ToolTip="TemplateDirectory"
                                     Margin="0,0,0,12" />
                        </StackPanel>
                    </GroupBox>

                    <GroupBox Header="输出" Margin="0,0,0,12">
                        <StackPanel Margin="4,8,4,-8">
                            <TextBlock Text="输出文件路径（留空：无文件输出）" FontWeight="Bold" Margin="0,0,0,6" />
                            <dialogs:FileSavePicker DefaultExtension=".cs" Filter="CSharp Files (.cs)|*.cs"
                                            FilePath="{Binding Command.OutputFilePath, Mode=TwoWay}" 
                                            ToolTip="Output"
                                            Margin="0,0,0,12" />

                            <StackPanel Visibility="{Binding Command.GenerateContractsOutput, Converter={StaticResource VisibilityConverter}}">
                                <TextBlock Text="协议输出文件路径（留空：单个输出文件输出）" FontWeight="Bold" Margin="0,0,0,6" />
                                <dialogs:FileSavePicker DefaultExtension=".cs" Filter="CSharp Files (.cs)|*.cs"
                                                FilePath="{Binding Command.ContractsOutputFilePath, Mode=TwoWay}" 
                                                ToolTip="ContractsOutput"
                                                Margin="0,0,0,12" />
                            </StackPanel>

                            <TextBlock Margin="0,0,0,6"
                                       Text="新行生成行为" TextWrapping="Wrap" FontWeight="Bold" />
                            <ComboBox SelectedItem="{Binding Command.NewLineBehavior, Mode=TwoWay}" ItemsSource="{Binding NewLineBehaviors}" Margin="0,0,0,12" />
                        </StackPanel>
                    </GroupBox>
                </StackPanel>
            </ScrollViewer>
        </TabItem>
        <TabItem Header="输出" HeaderTemplate="{StaticResource RotatedTabItem}">
            <Border Margin="-2">
                <avalonedit:TextEditor Background="GhostWhite" FontFamily="Consolas" IsReadOnly="True" ShowLineNumbers="True"
                                   SyntaxHighlighting="C#" FontSize="10pt" Padding="8">
                    <i:Interaction.Behaviors>
                        <controls:AvalonEditBehavior Text="{Binding ClientCode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </i:Interaction.Behaviors>
                </avalonedit:TextEditor>
            </Border>
        </TabItem>
    </TabControl>
</codeGenerators:CodeGeneratorViewBase>